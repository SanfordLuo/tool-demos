# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import music_pb2 as music__pb2


class MusicStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_music = channel.unary_unary(
                '/music.Music/get_music',
                request_serializer=music__pb2.name_req.SerializeToString,
                response_deserializer=music__pb2.music_resp.FromString,
                )
        self.ranking_music = channel.unary_stream(
                '/music.Music/ranking_music',
                request_serializer=music__pb2.limit_req.SerializeToString,
                response_deserializer=music__pb2.ranking_resp.FromString,
                )


class MusicServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_music(self, request, context):
        """A simple RPC: 简单RPC, 客户端使用存根发送请求到服务器并等待响应返回
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ranking_music(self, request, context):
        """A server-to-client streaming RPC: 客户端一次请求, 服务端流式响应
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MusicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_music': grpc.unary_unary_rpc_method_handler(
                    servicer.get_music,
                    request_deserializer=music__pb2.name_req.FromString,
                    response_serializer=music__pb2.music_resp.SerializeToString,
            ),
            'ranking_music': grpc.unary_stream_rpc_method_handler(
                    servicer.ranking_music,
                    request_deserializer=music__pb2.limit_req.FromString,
                    response_serializer=music__pb2.ranking_resp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'music.Music', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Music(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_music(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/music.Music/get_music',
            music__pb2.name_req.SerializeToString,
            music__pb2.music_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ranking_music(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/music.Music/ranking_music',
            music__pb2.limit_req.SerializeToString,
            music__pb2.ranking_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
